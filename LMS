class student:
    collegename="VIT BHOPAL"
    def __init__(self,x,y):
        self.ID=x
        self.name=y
        self.noofbookissued=0

    def displaystudentdetails(self):
        print(self.ID)
        print(self.name)
        print(self.noofbookissued)




class book:
    def __init__(self,x,y):
        self.bookid=x
        self.bookname=y
        self.isissued=False

    def displaybookdetails(self):
        print(self.bookid)
        print(self.bookname)
        print(self.isissued)

class issue:
    def __init__(self,x,y,z):
        self.issueid=x
        self.bookid=y
        self.stuid=z
        self.issuedate=None

    def displayissue(self):
        print(self.issueid)
        print(self.issuedate)


class history:
    def __init__(self,x,y,z):
        self.issueid=x
        self.bookid=y
        self.stuid=z
        self.issuedate=None
        self.returndate=None

    def displayhistory(self):
        print(self.issueid)
        print(self.issuedate)
        print(self.returndate)




class lms:
    studentlist=[]
    booklist=[]
    issuelist=[]
    history=[]
    issueidgen=1

    @classmethod
    def addstudent(cls):
        stuid=input("enter stu id: ")
        stuname=input("enter stu name: ")
        for j in cls.studentlist:
            if(j.ID==stuid):
                return "student id already exist"
        s=student(stuid,stuname)
        cls.studentlist.append(s)

    @classmethod
    def printdetailstu(cls):
        for i in cls.studentlist:
            i.displaystudentdetails()

    @classmethod
    def addbook(cls):
        bid=input("enter book id: ")
        bname=input("enter book name: ")
        for j in cls.booklist:
            if(j.bookid==bid):
                return "book id already exist"
        b=book(bid,bname)
        cls.booklist.append(b)

    @classmethod
    def printbook(cls):
        for j in cls.booklist:
            j.displaybookdetails()

    @classmethod
    def issue(cls):
        boid=input("enter book id: ")
        stid=input("enter student id: ")
        bflag=False
        for i in cls.booklist:
            if(i.bookid==boid and i.isissued==False ):
                bflag=True
                print("book available")
                break
        if(bflag== False):
            print("invalid bookid or not available")

        sflag=False
        for j in cls.studentlist:
            if(j.ID==stid):
                sflag=True
                print("valid student id")
                break

        if(sflag==False):
            print("invalid student id")


        if(bflag==True and sflag==True):
            for i in cls.booklist:
                if(boid==i.bookid):
                    i.isissued=True
                    break

            for j in cls.studentlist:
                if(stid==j.ID):
                    j.noofbookissued+=1
                    break

            ieid=cls.issueidgen
            cls.issueidgen+=1
            i=issue(ieid,boid,stid)
            h=history(ieid,boid,stid)
            cls.issuelist.append(i)
            cls.history.append(h)
            date=input("enter issue date: ")
            for i in cls.issuelist:
                if(ieid==i.issueid):
                    i.issuedate=date
                    break


            for i in cls.history:
                if(ieid==i.issueid):
                    i.issuedate=date
                    break

            print("book issued successfully")

    @classmethod
    def printissue(cls):
        for k in cls.issuelist:
            k.displayissue()

    @classmethod
    def returnbook(cls):
        isid=int(input("enter issue id: "))
        for i in cls.issuelist:
            if(i.issueid==isid):
                for j in cls.booklist:
                    if(j.bookid==i.bookid):
                        j.isissued=False
                        break

                for k in cls.studentlist:
                    if(k.ID==i.stuid):
                        k.noofbookissued-=1
                        break
                break

        date=input("enter return date: ")
        for t in cls.history:
            if(t.issueid==isid):
                t.returndate=date
                print("successfully returned")
                break
            else:
                print("invalid issue id")


        for j in cls.issuelist:
            if(j.issueid==isid):
                cls.issuelist.remove(j)
                break

    @classmethod
    def printhistory(cls):
        for i in cls.history:
            i.displayhistory()

    @classmethod
    def open(cls):
        print(" 1 to add student" )
        print("2 to add book ")
        print("3 to issue book")
        print("4 to return book")
        print("5 to see history")
        print("6 to view studentlist")
        print("7 to view booklist")
        print("8 to load data")
        print("9 to save data")
        print("10 to exit")
        n=0
        while(n!=10):
            n=int(input("enter no: "))
            if(n==1):
                lms.addstudent()
            elif(n==2):
                lms.addbook()
            elif(n==3):
                lms.issue()
            elif(n==4):
                lms.returnbook()
            elif(n==5):
                lms.printhistory()
            elif(n==6):
                lms.printdetailstu()
            elif(n==7):
                lms.printbook()
            elif(n==8):
                lms.load_from_file()
            elif(n==9):
                lms.save_to_file()
            else:
                n=int(input("enter choice: "))
        



lms.open()        
